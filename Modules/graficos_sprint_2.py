# -*- coding: utf-8 -*-
"""graficos_sprint_2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PsPorU-DSEfl1_EE-BM5QkFMJI_55mzV
"""

import numpy as np
import pandas as pd
import plotly.graph_objects as go
import plotly.express as px

from google.colab import files
uploaded = files.upload()

df = pd.read_csv('canciones_total.csv')
df

import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import plotly.graph_objects as go

def graficos_sprint_2(df):
    genre_counts = df['predicted_genre'].value_counts().reset_index()
    genre_counts.columns = ['Género', 'Conteo']

    plt.figure(figsize=(12, 6))
    sns.barplot(
        x='Conteo',
        y='Género',
        data=genre_counts.head(10),
        palette='viridis'
    )
    plt.title('Géneros Más Escuchados en la Lista de Reproducción')
    plt.xlabel('Conteo')
    plt.ylabel('Género')
    plt.show()

    scatter_valence_speechiness = px.scatter(
        df,
        x='valence',
        y='speechiness',
        color='popularidad',
        size='popularidad',
        hover_name='nombre',
        title='Relación entre Valence (Felicidad) y Speechiness',
        labels={"Valence": "Valence (Felicidad)", "Speechiness": "Speechiness"}
    )
    scatter_valence_speechiness.show()

    explicit_counts = df['explícito'].value_counts()
    plt.figure(figsize=(6, 6))
    plt.pie(
        explicit_counts,
        labels=explicit_counts.index,
        autopct='%1.1f%%',
        colors=['#66c2a5', '#fc8d62'],
        startangle=140
    )
    plt.title('Distribución de Canciones "Explícitas"')
    plt.show()

    mean_values = df[['danceability', 'energy', 'valence', 'tempo',
                      'acousticness', 'instrumentalness', 'speechiness',
                      'popularidad', 'duración (segundos)']].mean()

    radar_fig = go.Figure()
    radar_fig.add_trace(go.Scatterpolar(
        r=mean_values.values,
        theta=mean_values.index,
        fill='toself',
        name='Media de Atributos'
    ))
    radar_fig.update_layout(
        title='Media de Atributos de la Lista de Reproducción',
        polar=dict(
            radialaxis=dict(
                visible=True
            )
        )
    )
    radar_fig.show()

    df['artistas'] = df['artistas'].astype(str)
    all_artists = df['artistas'].str.split(', ')
    flattened_artists = all_artists.explode()
    artist_counts = flattened_artists.value_counts().reset_index()
    artist_counts.columns = ['Artista', 'Count']
    top_artists = artist_counts.head(10)

    plt.figure(figsize=(12, 6))
    sns.barplot(
        x='Count',
        y='Artista',
        data=top_artists,
        palette='viridis'
    )
    plt.title('Artistas Más Escuchados en la Lista de Reproducción (Conteo Total)')
    plt.xlabel('Número de Canciones')
    plt.ylabel('Artista')
    plt.show()

    top_10_artists = artist_counts.head(10)['Artista']
    df_exploded = df.explode('artistas')
    mean_popularity = df_exploded[df_exploded['artistas'].isin(top_10_artists)].groupby('artistas')['popularidad'].mean().reset_index()
    mean_popularity = mean_popularity.sort_values(by='popularidad', ascending=False)

    plt.figure(figsize=(12, 6))
    sns.barplot(
        x='popularidad',
        y='artistas',
        data=mean_popularity,
        palette='viridis'
    )
    plt.title('Popularidad Media de los 10 Mejores Artistas en la Lista de Reproducción')
    plt.xlabel('Popularidad Media')
    plt.ylabel('Artista')
    plt.show()

    quantitative_columns = ['danceability', 'energy', 'valence', 'tempo',
                            'acousticness', 'instrumentalness', 'speechiness',
                            'popularidad', 'duración (segundos)']
    corr_matrix = df[quantitative_columns].corr()

    heatmap = go.Figure(data=go.Heatmap(
        z=corr_matrix.values,
        x=corr_matrix.columns,
        y=corr_matrix.index
    ))
    heatmap.show()

graficos_sprint_2(df)